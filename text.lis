     1                                  bits 16;
     2                                  org 0x7c00;
     3                                  
     4                                  
     5                                  	
     6                                  
     7 00000000 BE[1E01]                	mov si,system_start;
     8 00000003 E8AB00                  	call printf_string;
     9                                  
    10                                  
    11                                  	
    12                                  	
    13                                  
    14                                  ;//get disk information;
    15                                  
    16                                  ;//system_run  flag
    17 00000006 BA0000                  mov dx,0x0000 ;dh->磁头号,dl->驱动器号
    18 00000009 B80000                  mov ax,0x0000
    19 0000000C 8EC0                    mov es,ax
    20 0000000E BB0010                  mov bx,0x1000 ;es:bx->the data   0x1000:0000
    21 00000011 B500                    mov ch,0 ;ch->磁道号
    22 00000013 B102                    mov cl,2 ;cl->起始扇区号
    23 00000015 B402                    mov ah,02h ;param
    24 00000017 B001                    mov al,01h ;how many blocks to read
    25 00000019 CD13                    int 13h
    26                                  	
    27                                  ;//load disk  flag;
    28 0000001B B8E803                  	mov ax,1000;
    29                                  	
    30 0000001E BE[6201]                	mov si,disk_load_finsh;
    31 00000021 E88D00                  	call printf_string;
    32                                  
    33                                  	
    34 00000024 BE0000                  	mov si,0;  
    35 00000027 B401                    	mov ah,01h;get disk nember that can use;
    36 00000029 CD13                    	int 13H;
    37 0000002B 3E88840090              	mov [ds:0x9000+si],al; this is main disk number;  
    38 00000030 46                      	inc si
    39 00000031 B408                    	mov ah,08h;
    40 00000033 CD13                    	int 13h;
    41 00000035 3E889C0090              	mov [ds:0x9000+si],bl; this is disk [si]ze; 2H 1.2M  03H 720k 04H 1.44M -1
    42 0000003A 46                      	inc si
    43 0000003B 3E88AC0090              	mov [ds:0x9000+si],ch; cylinder low 8 byte; -2
    44 00000040 46                      	inc si
    45 00000041 3E888C0090              	mov [ds:0x9000+si],cl; cl 7-6 byte is cylinfer hight 2 byte; 0-5 is sector number; -3
    46 00000046 46                      	inc si
    47 00000047 3E88B40090              	mov [ds:0x9000+si],dh;head number; -4
    48 0000004C 46                      	inc si
    49 0000004D 3E88940090              	mov [ds:0x9000+si],dl; disk num; -5
    50 00000052 56                      	push si;
    51                                  
    52 00000053 BE[3001]                	mov si,get_screen_information;
    53 00000056 E85800                  	call printf_string;
    54                                  	; start get screen information;
    55 00000059 5E                      	pop si;
    56 0000005A 46                      	inc si;
    57 0000005B B40F                    	mov ah,0fh;
    58 0000005D CD10                    	int 10h;
    59 0000005F 3E88840090              	mov [ds:0x9000+si],al; al is the screen model; -6
    60 00000064 46                      	inc si;
    61 00000065 3E88BC0090              	mov [ds:0x9000+si],bh; bh is the now page;  -7
    62 0000006A 46                      	inc si;
    63 0000006B 3E88A40090              	mov [ds:0x9000+si],ah ;the nember of rows about screen; -8
    64                                  
    65                                  
    66                                  	
    67                                  ;	mov si,0;
    68                                  ;	mov cx,32;
    69                                  ;.move_gdt_form:
    70                                  ;	mov ah,[ds:GDT_form+si]
    71                                  ;	mov [ds:0x9800+si],ah;
    72                                  ;	inc si; 
    73                                  ;	loop	.move_gdt_form;
    74                                  ;//move gdt to 0x9800;
    75                                  
    76 00000070 BE[4E01]                	mov si,move_gdt_close_int;	
    77 00000073 E83B00                  	call printf_string; text prinf string,use function--> .printf_string
    78                                  	
    79                                  	
    80 00000076 BE[9701]                	mov si,string_buffer;
    81 00000079 E85900                  	call enter_string;
    82                                  
    83                                  
    84 0000007C B80000                  	mov ax,0;
    85 0000007F 8ED8                    	mov ds,ax;	
    86 00000081 FA                      	cli;	
    87 00000082 60                      	pusha;
    88                                  
    89 00000083 0F0116[1801]            	lgdt [lgdt]
    90 00000088 61                      	popa;
    91                                  	
    92                                  	
    93 00000089 B0DD                    	mov al,0xdd;
    94 0000008B E664                    	out 0x64,al;
    95                                  	
    96                                  	
    97 0000008D 0F20C0                  	mov eax,cr0
    98 00000090 6683C801                	or eax,0x1;
    99 00000094 0F22C0                  	mov cr0,eax;
   100 00000097 89D8                    	mov ax,bx;
   101 00000099 89C8                    	mov ax,cx;
   102 0000009B 66EA001000000800        	jmp dword 0x0008:0x1000
   103                                  	
   104                                  
   105                                  
   106                                  
   107                                  	
   108                                  
   109                                  
   110                                  	
   111                                  
   112                                  
   113                                  
   114                                  	
   115                                  	
   116                                  
   117                                  printf_char:
   118                                  this:
   119 000000A3 268A04                  	mov al,es:si;	
   120 000000A6 B40E                    	mov ah,0x0e;
   121 000000A8 0430                    	add al,'0';
   122 000000AA CD10                    	int 0x10;
   123 000000AC 46                      	inc si;
   124 000000AD E2F4                    	loop this;
   125 000000AF EB44                    	jmp pop_sp;
   126                                  
   127                                  
   128                                  
   129                                  
   130                                  %include "printf_string.o"
   131                              <1> printf_string:
   132                              <1> ._printf_f_loop:
   133 000000B1 B40E                <1>         mov ah,0x0e;
   134 000000B3 8A04                <1>         mov al,[si];
   135 000000B5 3C00                <1>         cmp al,0;
   136 000000B7 743C                <1>         je pop_sp; 
   137 000000B9 CD10                <1>         int 0x10;
   138 000000BB 46                  <1>         inc si;
   139 000000BC EBF3                <1>         jmp ._printf_f_loop;
   131                                  %include "disk_load.o"
   132                              <1> disk_load:
   133 000000BE B600                <1> mov dh,0x00
   134 000000C0 B200                <1> mov dl,0x00 ;dh->磁头号,dl->驱动器号
   135 000000C2 B410                <1> mov ah,0x10
   136 000000C4 B000                <1> mov al,0x00
   137 000000C6 8EC0                <1> mov es,ax
   138 000000C8 31DB                <1> xor bx,bx ;es:bx->the data   0x1000:0000
   139 000000CA B500                <1> mov ch,0 ;ch->磁道号
   140 000000CC B102                <1> mov cl,2 ;cl->起始扇区号 由1开始
   141 000000CE B402                <1> mov ah,02h ; 标准
   142 000000D0 B001                <1> mov al,01h ;how many blocks to read
   143 000000D2 CD13                <1> int 13h
   144 000000D4 C3                  <1> ret;
   145                              <1> 
   132                                  %include "enter_string.o"
   133                              <1> enter_string:          ;function enter_string enter <=50 byte ,save in string_buffer
   134                              <1>         	; +2 because enter need jump "enter"
   135                              <1> 
   136                              <1> 	;this fuction is need si=string,buffer,and enter "=" stop;
   137                              <1> 	;
   138                              <1> 
   139                              <1> ._enter_f_loop:
   140 000000D5 B400                <1>         mov ah,0x00;
   141 000000D7 CD16                <1>         int 0x16;
   142 000000D9 3C3D                <1>         cmp al,'=';
   143 000000DB 7418                <1>         je pop_sp; return prevous function;
   144 000000DD B40E                <1>         mov ah,0x0e;
   145 000000DF CD10                <1>         int 0x10;
   146 000000E1 8804                <1>         mov [si],al;
   147 000000E3 83C601              <1>         add si,1;
   148 000000E6 EBED                <1>         jmp ._enter_f_loop;
   149                              <1> 
   150                              <1> 
   133                                  %include "enter.o"
   134                              <1> enter:
   135 000000E8 B40E                <1> 	mov ah,0x0e;
   136 000000EA B00A                <1> 	mov al,0xa;
   137 000000EC CD10                <1> 	int 0x10;
   138 000000EE B40E                <1> 	mov ah,0x0e;
   139 000000F0 B00D                <1> 	mov al,0xd;
   140 000000F2 CD10                <1> 	int 0x10;
   141 000000F4 C3                  <1> 	ret;
   134                                  %include "pop_sp.o"
   135                              <1> 
   136                              <1> pop_sp:
   137 000000F5 C3                  <1> 	ret;
   138                              <1> 
   135 000000F6 0090                    hware: dw 0x9000 ;hardware address;0x90000
   136                                  
   137                                  
   138                                  ;// GDT_form  init;
   139                                  GDT_form: 
   140 000000F8 0000000000000000        dw 0,0,0,0 ; thie first GDT_form ,this is must empty;
   141 00000100 FF07                    dw 0x07ff ;limit 8M
   142 00000102 0000                    dw 0x0000; base add;
   143 00000104 009A                    dw 0x9a00; code read/exec
   144 00000106 C000                    dw 0x00c0; granularity=4096;
   145                                  
   146 00000108 FF07                    dw 0x07ff ;limit 8M
   147 0000010A 0000                    dw 0x0000; base add;
   148 0000010C 0092                    dw 0x9200; code read/write
   149 0000010E C000                    dw 0x00c0; granularity=
   150                                  
   151 00000110 FF7C                    dw 0x7cff ; Limit (bits 0-15)
   152 00000112 0000                    dw 0x0 ; Base (bits 0-15)
   153 00000114 00                      db 0x0 ; Base (bits 16-23)
   154 00000115 92                      db 10010010b ; Access Byte
   155 00000116 40                      db 01000000b ; Flags , Limit (bits 16-19)
   156 00000117 00                      db 0x0 ; Base (bits 24-31)
   157                                  GDT_EDN:
   158                                  lgdt:
   159 00000118 1F00                    	dw GDT_EDN-GDT_form-1;
   160 0000011A [F8000000]              	dd GDT_form;
   161 0000011E 0A0D73797374656D5F-     system_start:db 0xa,0xd,"system_started;",0
   161 00000127 737461727465643B00 
   162 00000130 0A0D67657474696E67-     get_screen_information:db 0xa,0xd,"getting screen information;",0
   162 00000139 2073637265656E2069-
   162 00000142 6E666F726D6174696F-
   162 0000014B 6E3B00             
   163 0000014E 0A0D6D6F7665642067-     move_gdt_close_int:db 0xa,0xd,"moved gdt finshed",0
   163 00000157 64742066696E736865-
   163 00000160 6400               
   164                                  
   165 00000162 0A0D74686520646973-     disk_load_finsh:db 0xa,0xd,"the disk load is finsh;",0
   165 0000016B 6B206C6F6164206973-
   165 00000174 2066696E73683B00   
   166 0000017C 7468697320656E7465-     enter_is_work: db "this enter is good running",0
   166 00000185 7220697320676F6F64-
   166 0000018E 2072756E6E696E6700 
   167 00000197 00<rep 32h>             string_buffer: times 50 db 0; this is the enter_buffer end;
   168 000001C9 0D0A656E7465722069-     enter_successful: db 0xd,0xa,"enter is run",0;
   168 000001D2 732072756E00       
   169 000001D8 00<rep 26h>             times 510-($-$$) db 0;
   170 000001FE 55AA                    dw 0xaa55;
   171                                  
