     1                                  bits 16;
     2                                  org 0x7c00;
     3                                  
     4                                  	
     5                                  
     6 00000000 BE[2E01]                	mov si,system_start;
     7 00000003 E8BB00                  	call printf_string;
     8                                  
     9 00000006 B600                    	mov dh,0x00 ;dh->磁头号,dl->驱动器号
    10 00000008 B200                    	mov dl,0x00
    11 0000000A B80000                  	mov ax,0x0000
    12 0000000D 8EC0                    	mov es,ax
    13 0000000F BB0010                  	mov bx,0x1000 ;es:bx->the data   0x1000
    14 00000012 B402                    	mov ah,0x02
    15 00000014 B500                    	mov ch,0 ;ch->磁道号
    16 00000016 B102                    	mov cl,2 ;cl->起始扇区号
    17 00000018 B001                    	mov al,1 ;sector member
    18                                  lp:
    19 0000001A FEC0                    	inc al
    20 0000001C CD13                    	int 13h
    21 0000001E 81C30002                	add bx,512
    22 00000022 3C12                    	cmp al,18
    23 00000024 75F4                    	jne lp
    24 00000026 80FE01                  	cmp dh,1;
    25 00000029 7406                    	je pass
    26 0000002B B601                    	mov dh,1
    27 0000002D B000                    	mov al,0
    28 0000002F EBE9                    	jmp lp
    29                                  pass:
    30                                  
    31                                  ;//get disk information;
    32                                  
    33                                  ;//system_run  flag
    34                                  	
    35                                  
    36                                  	
    37                                  ;//load disk  flag;
    38 00000031 B8E803                  	mov ax,1000;
    39                                  	
    40 00000034 BE[7201]                	mov si,disk_load_finsh;
    41 00000037 E88700                  	call printf_string;
    42                                  
    43                                  	
    44 0000003A BE0000                  	mov si,0;  
    45 0000003D B401                    	mov ah,01h;get disk nember that can use;
    46 0000003F CD13                    	int 13H;
    47 00000041 3E88840090              	mov [ds:0x9000+si],al; this is main disk number;  
    48 00000046 46                      	inc si
    49 00000047 B408                    	mov ah,08h;
    50 00000049 CD13                    	int 13h;
    51 0000004B 3E889C0090              	mov [ds:0x9000+si],bl; this is disk [si]ze; 2H 1.2M  03H 720k 04H 1.44M -1
    52 00000050 46                      	inc si
    53 00000051 3E88AC0090              	mov [ds:0x9000+si],ch; cylinder low 8 byte; -2
    54 00000056 46                      	inc si
    55 00000057 3E888C0090              	mov [ds:0x9000+si],cl; cl 7-6 byte is cylinfer hight 2 byte; 0-5 is sector number; -3
    56 0000005C 46                      	inc si
    57 0000005D 3E88B40090              	mov [ds:0x9000+si],dh;head number; -4
    58 00000062 46                      	inc si
    59 00000063 3E88940090              	mov [ds:0x9000+si],dl; disk num; -5
    60 00000068 56                      	push si;
    61                                  
    62 00000069 BE[4001]                	mov si,get_screen_information;
    63 0000006C E85200                  	call printf_string;
    64                                  	; start get screen information;
    65 0000006F 5E                      	pop si;
    66 00000070 46                      	inc si;
    67 00000071 B40F                    	mov ah,0fh;
    68 00000073 CD10                    	int 10h;
    69 00000075 3E88840090              	mov [ds:0x9000+si],al; al is the screen model; -6
    70 0000007A 46                      	inc si;
    71 0000007B 3E88BC0090              	mov [ds:0x9000+si],bh; bh is the now page;  -7
    72 00000080 46                      	inc si;
    73 00000081 3E88A40090              	mov [ds:0x9000+si],ah ;the nember of rows about screen; -8
    74                                  
    75                                  
    76                                  	
    77                                  ;	mov si,0;
    78                                  ;	mov cx,32;
    79                                  ;.move_gdt_form:
    80                                  ;	mov ah,[ds:GDT_form+si]
    81                                  ;	mov [ds:0x9800+si],ah;
    82                                  ;	inc si; 
    83                                  ;	loop	.move_gdt_form;
    84                                  ;//move gdt to 0x9800;
    85                                  
    86 00000086 BE[5E01]                	mov si,move_gdt_close_int;	
    87 00000089 E83500                  	call printf_string; text prinf string,use function--> .printf_string
    88                                  	
    89                                  	
    90                                  ;	mov si,string_buffer;
    91                                  ;	call enter_string;
    92                                  
    93                                  
    94 0000008C B80000                  	mov ax,0;
    95 0000008F 8ED8                    	mov ds,ax;	
    96 00000091 FA                      	cli;	
    97 00000092 60                      	pusha;
    98                                  
    99 00000093 0F0116[2801]            	lgdt [lgdt]
   100 00000098 61                      	popa;
   101                                  	
   102                                  	
   103 00000099 B0DD                    	mov al,0xdd;
   104 0000009B E664                    	out 0x64,al;
   105                                  	
   106                                  	
   107 0000009D 0F20C0                  	mov eax,cr0
   108 000000A0 6683C801                	or eax,0x1;
   109 000000A4 0F22C0                  	mov cr0,eax;
   110 000000A7 89D8                    	mov ax,bx;
   111 000000A9 89C8                    	mov ax,cx;
   112 000000AB 66EA001000000800        	jmp dword 0x0008:0x1000
   113                                  	
   114                                  
   115                                  
   116                                  
   117                                  	
   118                                  
   119                                  
   120                                  
   121                                  	
   122                                  	
   123                                  	
   124                                  	
   125                                  	
   126                                  
   127                                  printf_char:
   128                                  this:
   129 000000B3 268A04                  	mov al,es:si;	
   130 000000B6 B40E                    	mov ah,0x0e;
   131 000000B8 0430                    	add al,'0';
   132 000000BA CD10                    	int 0x10;
   133 000000BC 46                      	inc si;
   134 000000BD E2F4                    	loop this;
   135 000000BF EB44                    	jmp pop_sp;
   136                                  
   137                                  
   138                                  
   139                                  
   140                                  %include "printf_string.o"
   141                              <1> printf_string:
   142                              <1> ._printf_f_loop:
   143 000000C1 B40E                <1>         mov ah,0x0e;
   144 000000C3 8A04                <1>         mov al,[si];
   145 000000C5 3C00                <1>         cmp al,0;
   146 000000C7 743C                <1>         je pop_sp; 
   147 000000C9 CD10                <1>         int 0x10;
   148 000000CB 46                  <1>         inc si;
   149 000000CC EBF3                <1>         jmp ._printf_f_loop;
   141                                  %include "disk_load.o"
   142                              <1> disk_load:
   143 000000CE B600                <1> mov dh,0x00
   144 000000D0 B200                <1> mov dl,0x00 ;dh->磁头号,dl->驱动器号
   145 000000D2 B410                <1> mov ah,0x10
   146 000000D4 B000                <1> mov al,0x00
   147 000000D6 8EC0                <1> mov es,ax
   148 000000D8 31DB                <1> xor bx,bx ;es:bx->the data   0x1000:0000
   149 000000DA B500                <1> mov ch,0 ;ch->磁道号
   150 000000DC B102                <1> mov cl,2 ;cl->起始扇区号 由1开始
   151 000000DE B402                <1> mov ah,02h ; 标准
   152 000000E0 B001                <1> mov al,01h ;how many blocks to read
   153 000000E2 CD13                <1> int 13h
   154 000000E4 C3                  <1> ret;
   155                              <1> 
   142                                  %include "enter_string.o"
   143                              <1> enter_string:          ;function enter_string enter <=50 byte ,save in string_buffer
   144                              <1>         	; +2 because enter need jump "enter"
   145                              <1> 
   146                              <1> 	;this fuction is need si=string,buffer,and enter "=" stop;
   147                              <1> 	;
   148                              <1> 
   149                              <1> ._enter_f_loop:
   150 000000E5 B400                <1>         mov ah,0x00;
   151 000000E7 CD16                <1>         int 0x16;
   152 000000E9 3C3D                <1>         cmp al,'=';
   153 000000EB 7418                <1>         je pop_sp; return prevous function;
   154 000000ED B40E                <1>         mov ah,0x0e;
   155 000000EF CD10                <1>         int 0x10;
   156 000000F1 8804                <1>         mov [si],al;
   157 000000F3 83C601              <1>         add si,1;
   158 000000F6 EBED                <1>         jmp ._enter_f_loop;
   159                              <1> 
   160                              <1> 
   143                                  %include "enter.o"
   144                              <1> enter:
   145 000000F8 B40E                <1> 	mov ah,0x0e;
   146 000000FA B00A                <1> 	mov al,0xa;
   147 000000FC CD10                <1> 	int 0x10;
   148 000000FE B40E                <1> 	mov ah,0x0e;
   149 00000100 B00D                <1> 	mov al,0xd;
   150 00000102 CD10                <1> 	int 0x10;
   151 00000104 C3                  <1> 	ret;
   144                                  %include "pop_sp.o"
   145                              <1> 
   146                              <1> pop_sp:
   147 00000105 C3                  <1> 	ret;
   148                              <1> 
   145 00000106 0090                    hware: dw 0x9000 ;hardware address;0x90000
   146                                  
   147                                  
   148                                  ;// GDT_form  init;
   149                                  GDT_form: 
   150 00000108 0000000000000000        dw 0,0,0,0 ; thie first GDT_form ,this is must empty;
   151 00000110 FF07                    dw 0x07ff ;limit 8M
   152 00000112 0000                    dw 0x0000; base add;
   153 00000114 009A                    dw 0x9a00; code read/exec
   154 00000116 C000                    dw 0x00c0; granularity=4096;
   155                                  
   156 00000118 FF07                    dw 0x07ff ;limit 8M
   157 0000011A 0000                    dw 0x0000; base add;
   158 0000011C 0092                    dw 0x9200; code read/write
   159 0000011E C000                    dw 0x00c0; granularity=
   160                                  
   161 00000120 FF7C                    dw 0x7cff ; Limit (bits 0-15)
   162 00000122 0000                    dw 0x0 ; Base (bits 0-15)
   163 00000124 00                      db 0x0 ; Base (bits 16-23)
   164 00000125 92                      db 10010010b ; Access Byte
   165 00000126 40                      db 01000000b ; Flags , Limit (bits 16-19)
   166 00000127 00                      db 0x0 ; Base (bits 24-31)
   167                                  GDT_EDN:
   168                                  lgdt:
   169 00000128 1F00                    	dw GDT_EDN-GDT_form-1;
   170 0000012A [08010000]              	dd GDT_form;
   171 0000012E 0A0D73797374656D5F-     system_start:db 0xa,0xd,"system_started;",0
   171 00000137 737461727465643B00 
   172 00000140 0A0D67657474696E67-     get_screen_information:db 0xa,0xd,"getting screen information;",0
   172 00000149 2073637265656E2069-
   172 00000152 6E666F726D6174696F-
   172 0000015B 6E3B00             
   173 0000015E 0A0D6D6F7665642067-     move_gdt_close_int:db 0xa,0xd,"moved gdt finshed",0
   173 00000167 64742066696E736865-
   173 00000170 6400               
   174                                  
   175 00000172 0A0D74686520646973-     disk_load_finsh:db 0xa,0xd,"the disk load is finsh;",0
   175 0000017B 6B206C6F6164206973-
   175 00000184 2066696E73683B00   
   176 0000018C 00<rep 32h>             string_buffer: times 50 db 0; this is the enter_buffer end;
   177                                  
   178 000001BE 00<rep 40h>             times 510-($-$$) db 0;
   179 000001FE 55AA                    dw 0xaa55;
   180                                  
