     1                                  bits 16;
     2                                  org 0x7c00;
     3 00000000 BE[4900]                	mov si,enter;	
     4 00000003 E80A00                  	call .printf_string; text prinf string,use function--> .printf_string
     5 00000006 E82B00                  	call .load;
     6 00000009 EA00000010              	jmp	0x1000:0;
     7                                  
     8                                  
     9                                  .stop:			;loop for stop this computer
    10 0000000E EBFE                    	jmp .stop; 
    11                                  
    12                                  
    13                                  
    14                                  .printf_string:  ;printf-string-function:need si=string addr; 
    15                                  
    16                                  ._printf_f_loop:
    17 00000010 B40E                    	mov ah,0x0e;
    18 00000012 8A04                    	mov al,[si];
    19 00000014 3C00                    	cmp al,0;
    20 00000016 7405                    	je .pop_sp; 
    21 00000018 CD10                    	int 0x10;
    22 0000001A 46                      	inc si;
    23 0000001B EBF3                    	jmp ._printf_f_loop;
    24                                  .pop_sp:	;use reture prevous function,not need parmar
    25 0000001D C3                      	ret;
    26                                  .enter_string:		;function enter_string enter <=50 byte ,save in string_buffer
    27 0000001E BE[CD00]                	mov si,string_buffer+2; +2 because enter need jump "enter"
    28                                  ._enter_f_loop:
    29 00000021 B400                    	mov ah,0x00;
    30 00000023 CD16                    	int 0x16;
    31 00000025 3C3D                    	cmp al,'=';
    32 00000027 74F4                    	je .pop_sp; return prevous function;
    33 00000029 B40E                    	mov ah,0x0e;
    34 0000002B CD10                    	int 0x10;
    35 0000002D 8804                    	mov [si],al;
    36 0000002F 83C601                  	add si,1;
    37 00000032 EBED                    	jmp ._enter_f_loop;
    38                                  
    39                                  .load:
    40 00000034 BA0000                  mov dx,0x0000 ;dh->磁头号,dl->驱动器号
    41 00000037 B80010                  mov ax,0x1000
    42 0000003A 8EC0                    mov es,ax
    43 0000003C 31DB                    xor bx,bx ;es:bx->the data   0x1000:0000
    44 0000003E B500                    mov ch,0 ;ch->磁道号
    45 00000040 B102                    mov cl,2 ;cl->起始扇区号
    46 00000042 B402                    mov ah,02h ;param
    47 00000044 B001                    mov al,01h ;how many blocks to read
    48 00000046 CD13                    int 13h
    49 00000048 C3                      ret;
    50 00000049 0A7468697320697320-     enter:db 0x0a,"this is first step in building system:enter 512 byte in momery",0x0d,0x0a,"enter = when complete",0xd,0xa,"start input:",0xd,0xa,0
    50 00000052 666972737420737465-
    50 0000005B 7020696E206275696C-
    50 00000064 64696E672073797374-
    50 0000006D 656D3A656E74657220-
    50 00000076 353132206279746520-
    50 0000007F 696E206D6F6D657279-
    50 00000088 0D0A656E746572203D-
    50 00000091 207768656E20636F6D-
    50 0000009A 706C6574650D0A7374-
    50 000000A3 61727420696E707574-
    50 000000AC 3A0D0A00           
    51 000000B0 7468697320656E7465-     enter_is_work: db "this enter is good running",0
    51 000000B9 7220697320676F6F64-
    51 000000C2 2072756E6E696E6700 
    52                                  string_buffer: 
    53 000000CB 0A0D                    db 0xa,0xd;
    54 000000CD 00<rep 32h>             times 50 db 0; this is the enter_buffer end;
    55 000000FF 0D0A656E7465722069-     enter_successful: db 0xd,0xa,"enter is run",0;
    55 00000108 732072756E00       
    56 0000010E 00<rep F0h>             times 510-($-$$) db 0;
    57 000001FE 55AA                    dw 0xaa55;
    58 00000200 B40E                    	mov ah,0x0e;
    59 00000202 B06E                    	mov al,'n';
    60 00000204 CD10                    	int 0x10;
    61 00000206 B40E                    	mov ah,0x0e;
    62 00000208 B073                    	mov al,'s';
    63 0000020A CD10                    	int 0x10;
    64 0000020C 68616C6C6F2C776F72-     db "hallo,world"
    64 00000215 6C64               
